/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package esportsapp;

import java.awt.*;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author User
 * @param <T>
 */
public class ManagementDialog<T extends EsportsInterface> extends javax.swing.JDialog {

	private int posX;
	private int posY;
	
	Class<T> type;
	T object;
	
	/**
	 * Creates new form ManagementDialog
	 */
	public ManagementDialog(Class<T> t, T obj) {
		super(EsportsGUI.getFrames()[0], true);
		
		this.type = t;
		this.object = obj;
		
		initComponents();
		this.setLocationRelativeTo(null);
		
		this.open();
	}
	
	private void open() {
		EsportsGUI.getComponentResizer().registerComponent(this);
		this.nameField.setText(this.object.getName());
		this.descriptionTextArea.setText(this.object.getDescription());
		this.iconLabel.setIcon(new ImageIcon(this.object.getIcon().getImage().getScaledInstance(32, 32, Image.SCALE_DEFAULT)));
		CardLayout card = (CardLayout)genericPanel.getLayout();
		card.show(genericPanel, this.type.getName());
		
		if (this.type.getName().equals("esportsapp.Event")) {
			//event prep
			addPanel.setVisible(false);
			Team.list.stream()
				.map((t) -> (t))
				.forEach((t) -> {
				if (!this.object.getScores().containsKey(t)) {
					addPanelList.add(t.panel);
				}
				});
		}
		
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        dragBarPanel = new javax.swing.JPanel();
        managementPanel = new javax.swing.JPanel();
        nameField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        iconLabel = new javax.swing.JLabel();
        genericPanel = new javax.swing.JPanel();
        eventGenericPanel = new javax.swing.JPanel();
        participantsListLabel = new javax.swing.JLabel();
        addPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        addPanelList = new javax.swing.JPanel();
        participantsListPanel = new javax.swing.JPanel();
        addPanelToggle = new javax.swing.JToggleButton();
        teamGenericPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        memberGenericPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        applyButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(200, 300));
        setModal(true);
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(400, 500));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        mainPanel.setBackground(Palette.getCurrentScheme().COLOR_MAIN.getColor());
        mainPanel.setLayout(new java.awt.GridBagLayout());

        closeButton.setBackground(Palette.getCurrentScheme().COLOR_MAIN.getColor());
        closeButton.setIcon(Palette.getCurrentScheme().ICON_CLOSE.getIcon());
        closeButton.setBorder(null);
        closeButton.setBorderPainted(false);
        closeButton.setFocusable(false);
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeButtonMouseExited(evt);
            }
        });
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        mainPanel.add(closeButton, gridBagConstraints);

        dragBarPanel.setFocusable(false);
        dragBarPanel.setOpaque(false);
        dragBarPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                dragBarPanelMouseDragged(evt);
            }
        });
        dragBarPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dragBarPanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout dragBarPanelLayout = new javax.swing.GroupLayout(dragBarPanel);
        dragBarPanel.setLayout(dragBarPanelLayout);
        dragBarPanelLayout.setHorizontalGroup(
            dragBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 399, Short.MAX_VALUE)
        );
        dragBarPanelLayout.setVerticalGroup(
            dragBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        mainPanel.add(dragBarPanel, gridBagConstraints);

        managementPanel.setBackground(Palette.getCurrentScheme().COLOR_ACTIVE.getColor());
        managementPanel.setLayout(new java.awt.GridBagLayout());

        nameField.setBackground(Palette.getCurrentScheme().COLOR_INPUT_BACK.getColor());
        nameField.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        nameField.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
        nameField.setText("Name");
        nameField.setBorder(null);
        nameField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        nameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        managementPanel.add(nameField, gridBagConstraints);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(183, 100));

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(4);
        descriptionTextArea.setTabSize(4);
        descriptionTextArea.setWrapStyleWord(true);
        descriptionTextArea.setPreferredSize(new java.awt.Dimension(164, 100));
        descriptionTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                descriptionTextAreaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(descriptionTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        managementPanel.add(jScrollPane1, gridBagConstraints);

        iconLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iconLabelMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        managementPanel.add(iconLabel, gridBagConstraints);

        genericPanel.setOpaque(false);
        genericPanel.setLayout(new java.awt.CardLayout());

        eventGenericPanel.setOpaque(false);
        eventGenericPanel.setLayout(new java.awt.GridBagLayout());

        participantsListLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        participantsListLabel.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor()
        );
        participantsListLabel.setText("Participating Teams");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        eventGenericPanel.add(participantsListLabel, gridBagConstraints);

        addPanel.setBackground(Palette.getCurrentScheme().COLOR_MAIN.getColor());
        addPanel.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setOpaque(false);

        addPanelList.setOpaque(false);
        addPanelList.setLayout(new javax.swing.BoxLayout(addPanelList, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(addPanelList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addPanel.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 20, 20);
        eventGenericPanel.add(addPanel, gridBagConstraints);

        participantsListPanel.setBorder(javax.swing.BorderFactory.createLineBorder(Palette.getCurrentScheme().COLOR_MAIN.getColor()
        ));
        participantsListPanel.setOpaque(false);
        participantsListPanel.setLayout(new javax.swing.BoxLayout(participantsListPanel, javax.swing.BoxLayout.LINE_AXIS));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        eventGenericPanel.add(participantsListPanel, gridBagConstraints);

        addPanelToggle.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
        addPanelToggle.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
        addPanelToggle.setText("+");
        addPanelToggle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addPanelToggle.setContentAreaFilled(false);
        addPanelToggle.setFocusable(false);
        addPanelToggle.setMinimumSize(new java.awt.Dimension(25, 19));
        addPanelToggle.setPreferredSize(new java.awt.Dimension(25, 19));
        addPanelToggle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                addPanelToggleItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        eventGenericPanel.add(addPanelToggle, gridBagConstraints);

        genericPanel.add(eventGenericPanel, "esportsapp.Event");

        teamGenericPanel.setOpaque(false);
        teamGenericPanel.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("jLabel3");
        teamGenericPanel.add(jLabel3, new java.awt.GridBagConstraints());

        genericPanel.add(teamGenericPanel, "esportsapp.Team");

        memberGenericPanel.setOpaque(false);
        memberGenericPanel.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("jLabel2");
        memberGenericPanel.add(jLabel2, new java.awt.GridBagConstraints());

        genericPanel.add(memberGenericPanel, "esportsapp.Member");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        managementPanel.add(genericPanel, gridBagConstraints);

        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.GridBagLayout());

        cancelButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
        cancelButton.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
        cancelButton.setText("Cancel");
        cancelButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cancelButton.setContentAreaFilled(false);
        cancelButton.setFocusable(false);
        cancelButton.setPreferredSize(new java.awt.Dimension(50, 25));
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cancelButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cancelButtonMouseExited(evt);
            }
        });
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel3.add(cancelButton, gridBagConstraints);

        applyButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
        applyButton.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
        applyButton.setText("Apply");
        applyButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        applyButton.setContentAreaFilled(false);
        applyButton.setEnabled(false);
        applyButton.setFocusable(false);
        applyButton.setPreferredSize(new java.awt.Dimension(50, 25));
        applyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                applyButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                applyButtonMouseExited(evt);
            }
        });
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel3.add(applyButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weightx = 1.0;
        managementPanel.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        mainPanel.add(managementPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 53;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(mainPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseEntered
        // TODO add your handling code here:
        closeButton.setIcon(Palette.getCurrentScheme().ICON_CLOSE_MOUSE_OVER.getIcon());
        closeButton.setBackground(Palette.getCurrentScheme().COLOR_CLOSE_MOUSE_OVER.getColor());
    }//GEN-LAST:event_closeButtonMouseEntered

    private void closeButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseExited
        // TODO add your handling code here:
        closeButton.setIcon(Palette.getCurrentScheme().ICON_CLOSE.getIcon());
        closeButton.setBackground(Palette.getCurrentScheme().COLOR_MAIN.getColor());
    }//GEN-LAST:event_closeButtonMouseExited

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void dragBarPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragBarPanelMouseDragged
        // TODO add your handling code here:
        Rectangle rectangle = this.getBounds();
        this.setBounds(evt.getXOnScreen() - posX, evt.getYOnScreen() - posY, rectangle.width, rectangle.height);
    }//GEN-LAST:event_dragBarPanelMouseDragged

    private void dragBarPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragBarPanelMousePressed
        // TODO add your handling code here:
        posX = evt.getX();
        posY = evt.getY();
    }//GEN-LAST:event_dragBarPanelMousePressed

    private void applyButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_applyButtonMouseEntered
        // TODO add your handling code here:
		applyButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_BACK.getColor());
		applyButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_FRONT.getColor());
    }//GEN-LAST:event_applyButtonMouseEntered

    private void applyButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_applyButtonMouseExited
        // TODO add your handling code here:
		applyButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
		applyButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
    }//GEN-LAST:event_applyButtonMouseExited

    private void cancelButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseEntered
        // TODO add your handling code here:
		cancelButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_BACK.getColor());
		cancelButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_FRONT.getColor());
    }//GEN-LAST:event_cancelButtonMouseEntered

    private void cancelButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseExited
        // TODO add your handling code here:
		cancelButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
		cancelButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
    }//GEN-LAST:event_cancelButtonMouseExited

	JFileChooser chooser = new JFileChooser();
	
    private void iconLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconLabelMouseClicked
        // TODO add your handling code here:
		FileNameExtensionFilter filter = new FileNameExtensionFilter("JPEG & PNG Images", "jpeg", "jpg", "png");
		chooser.setFileFilter(filter);
		int returnVal = chooser.showOpenDialog(EsportsGUI.getFrames()[0]);
		if(returnVal == JFileChooser.APPROVE_OPTION) {
			if (chooser.getSelectedFile().exists()) {
				this.iconLabel.setIcon(new ImageIcon(new ImageIcon(chooser.getSelectedFile().getAbsolutePath()).getImage().getScaledInstance(32, 32, Image.SCALE_DEFAULT)));
				this.applyButton.setEnabled(true);
			}
	    }
    }//GEN-LAST:event_iconLabelMouseClicked

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        // TODO add your handling code here:
		if (!this.nameField.getText().equals("")) {
			this.object.setName(this.nameField.getText());
		} else {
			JOptionPane.showMessageDialog(this, "Name cannot be empty!");
			return;
		}
		
		this.object.setDescription(this.descriptionTextArea.getText());
		
		if (!(this.chooser.getSelectedFile() == null) && (this.chooser.getSelectedFile().exists())) {
			this.object.setIcon(new ImageIcon(chooser.getSelectedFile().getAbsolutePath()));
		}
		
		this.applyButton.setEnabled(false);
    }//GEN-LAST:event_applyButtonActionPerformed

    private void nameFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameFieldKeyTyped
        // TODO add your handling code here:
		this.applyButton.setEnabled(true);
    }//GEN-LAST:event_nameFieldKeyTyped

    private void descriptionTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descriptionTextAreaKeyTyped
        // TODO add your handling code here:
        this.applyButton.setEnabled(true);
    }//GEN-LAST:event_descriptionTextAreaKeyTyped

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
		this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addPanelToggleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_addPanelToggleItemStateChanged
        // TODO add your handling code here:
		addPanel.setVisible(addPanelToggle.isSelected());
		if (addPanelToggle.isSelected()) {
			addPanelToggle.setBackground(Palette.getCurrentScheme().COLOR_MAIN.getColor());
			addPanelToggle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
		} else {
			addPanelToggle.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
			addPanelToggle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
		}
    }//GEN-LAST:event_addPanelToggleItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addPanel;
    private javax.swing.JPanel addPanelList;
    private javax.swing.JToggleButton addPanelToggle;
    private javax.swing.JButton applyButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JPanel dragBarPanel;
    private javax.swing.JPanel eventGenericPanel;
    private javax.swing.JPanel genericPanel;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel managementPanel;
    private javax.swing.JPanel memberGenericPanel;
    protected javax.swing.JTextField nameField;
    private javax.swing.JLabel participantsListLabel;
    private javax.swing.JPanel participantsListPanel;
    private javax.swing.JPanel teamGenericPanel;
    // End of variables declaration//GEN-END:variables
}
