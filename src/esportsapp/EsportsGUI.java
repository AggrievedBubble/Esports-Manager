/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package esportsapp;

import java.awt.*;
import javax.swing.*;



/**
 *
 * @author User
 */

public class EsportsGUI extends javax.swing.JFrame {

	private int posX;
	private int posY;

    /**
     * Creates new form EsportsGUI
     */
    public EsportsGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        menuButtonGroup = new javax.swing.ButtonGroup();
        themeButtonGroup = new javax.swing.ButtonGroup();
        displayButtonGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        dragBarPanel = new javax.swing.JPanel();
        minimiseButton = new javax.swing.JButton();
        maximiseButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        menuPanel = new javax.swing.JPanel();
        eventsToggleButton = new javax.swing.JToggleButton();
        teamsToggleButton = new javax.swing.JToggleButton();
        leaderboardToggleButton = new javax.swing.JToggleButton();
        settingsToggleButton = new javax.swing.JToggleButton();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        activePanel = new javax.swing.JPanel();
        eventsPanel = new javax.swing.JPanel();
        eventsScrollPane = new javax.swing.JScrollPane();
        eventsListPanel = new javax.swing.JPanel();
        addEventPanel = new javax.swing.JPanel();
        addEventButton = new javax.swing.JButton();
        teamsPanel = new javax.swing.JPanel();
        teamsScrollPane = new javax.swing.JScrollPane();
        teamsListPanel = new javax.swing.JPanel();
        leaderboardPanel = new javax.swing.JPanel();
        leaderboardScrollPane = new javax.swing.JScrollPane();
        settingsScrollPane = new javax.swing.JScrollPane();
        settingsPanel = new javax.swing.JPanel();
        appearanceLabel = new javax.swing.JLabel();
        themeLabel = new javax.swing.JLabel();
        darkThemeCheck = new javax.swing.JCheckBox();
        lightThemeCheck = new javax.swing.JCheckBox();
        displayLabel = new javax.swing.JLabel();
        cozyDesignCheck = new javax.swing.JCheckBox();
        compactDesignCheck = new javax.swing.JCheckBox();
        accessibilityLabel = new javax.swing.JLabel();
        alwaysOnTopLabel = new javax.swing.JLabel();
        alwaysOnTopTipLabel = new javax.swing.JLabel();
        alwaysOnTopCheck = new javax.swing.JCheckBox();
        alwaysOnTopSeparator = new javax.swing.JSeparator();
        naratorLabel = new javax.swing.JLabel();
        naratorTipLabel = new javax.swing.JLabel();
        naratorCheck = new javax.swing.JCheckBox();
        naratorSeparator = new javax.swing.JSeparator();
        versionLabel = new javax.swing.JLabel();
        disclaimerLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Esports Manager");
        setAutoRequestFocus(false);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("frame"); // NOI18N
        setUndecorated(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        mainPanel.setBackground(esportsapp.Palette.getCurrentScheme().COLOR_MAIN.getColor());
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        mainPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        mainPanel.setLayout(new java.awt.GridBagLayout());

        dragBarPanel.setOpaque(false);
        dragBarPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                dragBarPanelMouseDragged(evt);
            }
        });
        dragBarPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dragBarPanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout dragBarPanelLayout = new javax.swing.GroupLayout(dragBarPanel);
        dragBarPanel.setLayout(dragBarPanelLayout);
        dragBarPanelLayout.setHorizontalGroup(
            dragBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        dragBarPanelLayout.setVerticalGroup(
            dragBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        mainPanel.add(dragBarPanel, gridBagConstraints);

        minimiseButton.setBackground(esportsapp.Palette.getCurrentScheme().COLOR_MAIN.getColor());
        minimiseButton.setIcon(esportsapp.Palette.getCurrentScheme().ICON_MINIMISE.getIcon());
        minimiseButton.setBorder(null);
        minimiseButton.setBorderPainted(false);
        minimiseButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minimiseButton.setFocusable(false);
        minimiseButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        minimiseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                minimiseButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                minimiseButtonMouseExited(evt);
            }
        });
        minimiseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minimiseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        mainPanel.add(minimiseButton, gridBagConstraints);

        maximiseButton.setBackground(esportsapp.Palette.getCurrentScheme().COLOR_MAIN.getColor());
        maximiseButton.setIcon(esportsapp.Palette.getCurrentScheme().ICON_MAXIMISE.getIcon());
        maximiseButton.setBorder(null);
        maximiseButton.setBorderPainted(false);
        maximiseButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        maximiseButton.setFocusable(false);
        maximiseButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        maximiseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                maximiseButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                maximiseButtonMouseExited(evt);
            }
        });
        maximiseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maximiseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        mainPanel.add(maximiseButton, gridBagConstraints);

        closeButton.setBackground(esportsapp.Palette.getCurrentScheme().COLOR_MAIN.getColor());
        closeButton.setIcon(esportsapp.Palette.getCurrentScheme().ICON_CLOSE.getIcon());
        closeButton.setBorder(null);
        closeButton.setBorderPainted(false);
        closeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closeButton.setFocusable(false);
        closeButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeButtonMouseExited(evt);
            }
        });
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        mainPanel.add(closeButton, gridBagConstraints);

        menuPanel.setBackground(esportsapp.Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
        menuPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        menuPanel.setLayout(new java.awt.GridBagLayout());

        eventsToggleButton.setBackground(menuPanel.getBackground());
        menuButtonGroup.add(eventsToggleButton);
        eventsToggleButton.setFont(eventsToggleButton.getFont().deriveFont(eventsToggleButton.getFont().getSize()+7f));
        eventsToggleButton.setForeground(esportsapp.Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
        eventsToggleButton.setText("Events");
        eventsToggleButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        eventsToggleButton.setBorderPainted(false);
        eventsToggleButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        eventsToggleButton.setFocusable(false);
        eventsToggleButton.setOpaque(true);
        eventsToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                eventsToggleButtonItemStateChanged(evt);
            }
        });
        eventsToggleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                eventsToggleButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                eventsToggleButtonMouseExited(evt);
            }
        });
        eventsToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventsToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 20, 0, 20);
        menuPanel.add(eventsToggleButton, gridBagConstraints);

        teamsToggleButton.setBackground(menuPanel.getBackground());
        menuButtonGroup.add(teamsToggleButton);
        teamsToggleButton.setFont(teamsToggleButton.getFont().deriveFont(teamsToggleButton.getFont().getSize()+7f));
        teamsToggleButton.setForeground(esportsapp.Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
        teamsToggleButton.setText("Teams");
        teamsToggleButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        teamsToggleButton.setBorderPainted(false);
        teamsToggleButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        teamsToggleButton.setFocusable(false);
        teamsToggleButton.setOpaque(true);
        teamsToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                teamsToggleButtonItemStateChanged(evt);
            }
        });
        teamsToggleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                teamsToggleButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                teamsToggleButtonMouseExited(evt);
            }
        });
        teamsToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamsToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 20, 0, 20);
        menuPanel.add(teamsToggleButton, gridBagConstraints);

        leaderboardToggleButton.setBackground(menuPanel.getBackground());
        menuButtonGroup.add(leaderboardToggleButton);
        leaderboardToggleButton.setFont(leaderboardToggleButton.getFont().deriveFont(leaderboardToggleButton.getFont().getSize()+7f));
        leaderboardToggleButton.setForeground(esportsapp.Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
        leaderboardToggleButton.setText("Leaderboard");
        leaderboardToggleButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        leaderboardToggleButton.setBorderPainted(false);
        leaderboardToggleButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        leaderboardToggleButton.setFocusable(false);
        leaderboardToggleButton.setOpaque(true);
        leaderboardToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                leaderboardToggleButtonItemStateChanged(evt);
            }
        });
        leaderboardToggleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                leaderboardToggleButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                leaderboardToggleButtonMouseExited(evt);
            }
        });
        leaderboardToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaderboardToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 20, 0, 20);
        menuPanel.add(leaderboardToggleButton, gridBagConstraints);

        settingsToggleButton.setBackground(menuPanel.getBackground());
        menuButtonGroup.add(settingsToggleButton);
        settingsToggleButton.setFont(settingsToggleButton.getFont().deriveFont(settingsToggleButton.getFont().getSize()+7f));
        settingsToggleButton.setForeground(esportsapp.Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
        settingsToggleButton.setText("Settings");
        settingsToggleButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        settingsToggleButton.setBorderPainted(false);
        settingsToggleButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        settingsToggleButton.setFocusable(false);
        settingsToggleButton.setOpaque(true);
        settingsToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                settingsToggleButtonItemStateChanged(evt);
            }
        });
        settingsToggleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                settingsToggleButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                settingsToggleButtonMouseExited(evt);
            }
        });
        settingsToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 20, 0, 20);
        menuPanel.add(settingsToggleButton, gridBagConstraints);

        saveButton.setBackground(menuPanel.getBackground());
        saveButton.setFont(saveButton.getFont().deriveFont(saveButton.getFont().getSize()+7f));
        saveButton.setForeground(esportsapp.Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
        saveButton.setText("Save");
        saveButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        saveButton.setBorderPainted(false);
        saveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveButton.setFocusable(false);
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                saveButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                saveButtonMouseExited(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 10);
        menuPanel.add(saveButton, gridBagConstraints);

        loadButton.setBackground(menuPanel.getBackground());
        loadButton.setFont(loadButton.getFont().deriveFont(loadButton.getFont().getSize()+7f));
        loadButton.setForeground(esportsapp.Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
        loadButton.setText("Load");
        loadButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        loadButton.setBorderPainted(false);
        loadButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        loadButton.setFocusable(false);
        loadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                loadButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                loadButtonMouseExited(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 20, 20);
        menuPanel.add(loadButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(menuPanel, gridBagConstraints);

        activePanel.setBackground(esportsapp.Palette.getCurrentScheme().COLOR_ACTIVE.getColor());
        activePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        activePanel.setLayout(new java.awt.CardLayout());

        eventsPanel.setOpaque(false);
        eventsPanel.setLayout(new java.awt.GridBagLayout());

        eventsScrollPane.setBorder(null);
        eventsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        eventsScrollPane.setOpaque(false);
        eventsScrollPane.setViewportView(null);

        eventsListPanel.setOpaque(false);
        eventsListPanel.setLayout(new javax.swing.BoxLayout(eventsListPanel, javax.swing.BoxLayout.Y_AXIS));

        addEventPanel.setMaximumSize(new java.awt.Dimension(2147483647, 50));
        addEventPanel.setOpaque(false);
        addEventPanel.setPreferredSize(new java.awt.Dimension(400, 50));
        addEventPanel.setLayout(new java.awt.GridBagLayout());

        addEventButton.setIcon(Palette.getCurrentScheme().ICON_SMALL_PLUS.getIcon());
        addEventButton.setBorder(null);
        addEventButton.setBorderPainted(false);
        addEventButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addEventButton.setFocusPainted(false);
        addEventButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        addEventButton.setOpaque(false);
        addEventButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addEventButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addEventButtonMouseExited(evt);
            }
        });
        addEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEventButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addEventPanel.add(addEventButton, gridBagConstraints);

        eventsListPanel.add(addEventPanel);

        eventsScrollPane.setViewportView(eventsListPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        eventsPanel.add(eventsScrollPane, gridBagConstraints);

        activePanel.add(eventsPanel, "eventsCard");

        teamsPanel.setOpaque(false);
        teamsPanel.setLayout(new java.awt.GridBagLayout());

        teamsScrollPane.setBorder(null);
        teamsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        teamsScrollPane.setOpaque(false);
        teamsScrollPane.setViewportView(null);

        teamsListPanel.setOpaque(false);

        javax.swing.GroupLayout teamsListPanelLayout = new javax.swing.GroupLayout(teamsListPanel);
        teamsListPanel.setLayout(teamsListPanelLayout);
        teamsListPanelLayout.setHorizontalGroup(
            teamsListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        teamsListPanelLayout.setVerticalGroup(
            teamsListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        teamsScrollPane.setViewportView(teamsListPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        teamsPanel.add(teamsScrollPane, gridBagConstraints);

        activePanel.add(teamsPanel, "teamsCard");

        leaderboardPanel.setOpaque(false);
        leaderboardPanel.setLayout(new java.awt.GridBagLayout());

        leaderboardScrollPane.setBorder(null);
        leaderboardScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        leaderboardScrollPane.setOpaque(false);
        leaderboardScrollPane.setViewportView(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        leaderboardPanel.add(leaderboardScrollPane, gridBagConstraints);

        activePanel.add(leaderboardPanel, "leaderboardCard");

        settingsScrollPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        settingsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        settingsScrollPane.setViewportBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        settingsScrollPane.setOpaque(false);
        settingsScrollPane.setViewportView(null);

        settingsPanel.setOpaque(false);
        java.awt.GridBagLayout settingsPanelLayout = new java.awt.GridBagLayout();
        settingsPanelLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        settingsPanelLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        settingsPanel.setLayout(settingsPanelLayout);

        appearanceLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        appearanceLabel.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
        appearanceLabel.setText("Appearance:");
        appearanceLabel.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        settingsPanel.add(appearanceLabel, gridBagConstraints);

        themeLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        themeLabel.setForeground(Palette.getCurrentScheme().COLOR_TERTIARY_TEXT.getColor());
        themeLabel.setText("THEME");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        settingsPanel.add(themeLabel, gridBagConstraints);

        darkThemeCheck.setBackground(new java.awt.Color(114, 137, 218));
        themeButtonGroup.add(darkThemeCheck);
        darkThemeCheck.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        darkThemeCheck.setForeground(new java.awt.Color(255, 255, 255));
        darkThemeCheck.setSelected(true);
        darkThemeCheck.setText("Dark");
        darkThemeCheck.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(32, 34, 37), 1, true), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        darkThemeCheck.setBorderPainted(true);
        darkThemeCheck.setFocusable(false);
        darkThemeCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        darkThemeCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        darkThemeCheck.setMargin(new java.awt.Insets(5, 5, 5, 5));
        darkThemeCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                darkThemeCheckItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        settingsPanel.add(darkThemeCheck, gridBagConstraints);

        lightThemeCheck.setBackground(new java.awt.Color(47, 50, 55));
        themeButtonGroup.add(lightThemeCheck);
        lightThemeCheck.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lightThemeCheck.setForeground(new java.awt.Color(255, 255, 255));
        lightThemeCheck.setText("Light");
        lightThemeCheck.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(32, 34, 37), 1, true), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        lightThemeCheck.setBorderPainted(true);
        lightThemeCheck.setFocusable(false);
        lightThemeCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lightThemeCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        lightThemeCheck.setMargin(new java.awt.Insets(5, 5, 5, 5));
        lightThemeCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lightThemeCheckItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        settingsPanel.add(lightThemeCheck, gridBagConstraints);

        displayLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        displayLabel.setForeground(Palette.getCurrentScheme().COLOR_TERTIARY_TEXT.getColor());
        displayLabel.setText("DISPLAY");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        settingsPanel.add(displayLabel, gridBagConstraints);

        cozyDesignCheck.setBackground(new java.awt.Color(114, 137, 218));
        displayButtonGroup.add(cozyDesignCheck);
        cozyDesignCheck.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cozyDesignCheck.setForeground(new java.awt.Color(255, 255, 255));
        cozyDesignCheck.setSelected(true);
        cozyDesignCheck.setText("Cozy: Modern, beautifull and easy on your eyes.");
        cozyDesignCheck.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(32, 34, 37), 1, true), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        cozyDesignCheck.setBorderPainted(true);
        cozyDesignCheck.setFocusable(false);
        cozyDesignCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        cozyDesignCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        cozyDesignCheck.setMargin(new java.awt.Insets(5, 5, 5, 5));
        cozyDesignCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cozyDesignCheckItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        settingsPanel.add(cozyDesignCheck, gridBagConstraints);

        compactDesignCheck.setBackground(new java.awt.Color(47, 50, 55));
        displayButtonGroup.add(compactDesignCheck);
        compactDesignCheck.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        compactDesignCheck.setForeground(new java.awt.Color(255, 255, 255));
        compactDesignCheck.setText("Compact: Fit more things on the screen at one time.");
        compactDesignCheck.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(32, 34, 37), 1, true), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        compactDesignCheck.setBorderPainted(true);
        compactDesignCheck.setEnabled(false);
        compactDesignCheck.setFocusable(false);
        compactDesignCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        compactDesignCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        compactDesignCheck.setMargin(new java.awt.Insets(5, 5, 5, 5));
        compactDesignCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                compactDesignCheckItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        settingsPanel.add(compactDesignCheck, gridBagConstraints);

        accessibilityLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        accessibilityLabel.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
        accessibilityLabel.setText("Accessibility:");
        accessibilityLabel.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        settingsPanel.add(accessibilityLabel, gridBagConstraints);

        alwaysOnTopLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        alwaysOnTopLabel.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
        alwaysOnTopLabel.setText("Always On Top");
        alwaysOnTopLabel.setToolTipText("");
        alwaysOnTopLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        alwaysOnTopLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                alwaysOnTopLabelMousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        settingsPanel.add(alwaysOnTopLabel, gridBagConstraints);

        alwaysOnTopTipLabel.setForeground(Palette.getCurrentScheme().COLOR_SECONDARY_TEXT.getColor());
        alwaysOnTopTipLabel.setText("Makes this window appear on top of other windows.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        settingsPanel.add(alwaysOnTopTipLabel, gridBagConstraints);

        alwaysOnTopCheck.setContentAreaFilled(false);
        alwaysOnTopCheck.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        alwaysOnTopCheck.setFocusable(false);
        alwaysOnTopCheck.setIcon(esportsapp.Palette.getCurrentScheme().ICON_TOGGLE_SWITCH.getIcon());
        alwaysOnTopCheck.setSelectedIcon(esportsapp.Palette.getCurrentScheme().ICON_SELECTED_TOGGLE_SWITCH.getIcon());
        alwaysOnTopCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alwaysOnTopCheckActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        settingsPanel.add(alwaysOnTopCheck, gridBagConstraints);

        alwaysOnTopSeparator.setBackground(Palette.getCurrentScheme().COLOR_SEPARATOR.getColor());
        alwaysOnTopSeparator.setForeground(Palette.getCurrentScheme().COLOR_SEPARATOR.getColor());
        alwaysOnTopSeparator.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsPanel.add(alwaysOnTopSeparator, gridBagConstraints);

        naratorLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        naratorLabel.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
        naratorLabel.setText("Narator");
        naratorLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        settingsPanel.add(naratorLabel, gridBagConstraints);

        naratorTipLabel.setForeground(Palette.getCurrentScheme().COLOR_SECONDARY_TEXT.getColor());
        naratorTipLabel.setText("Narates the text that you place your cursor on.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        settingsPanel.add(naratorTipLabel, gridBagConstraints);

        naratorCheck.setContentAreaFilled(false);
        naratorCheck.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        naratorCheck.setEnabled(false);
        naratorCheck.setFocusable(false);
        naratorCheck.setIcon(esportsapp.Palette.getCurrentScheme().ICON_TOGGLE_SWITCH.getIcon());
        naratorCheck.setSelectedIcon(esportsapp.Palette.getCurrentScheme().ICON_SELECTED_TOGGLE_SWITCH.getIcon());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        settingsPanel.add(naratorCheck, gridBagConstraints);

        naratorSeparator.setBackground(Palette.getCurrentScheme().COLOR_SEPARATOR.getColor());
        naratorSeparator.setForeground(Palette.getCurrentScheme().COLOR_SEPARATOR.getColor());
        naratorSeparator.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 28;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        settingsPanel.add(naratorSeparator, gridBagConstraints);

        versionLabel.setForeground(Palette.getCurrentScheme().COLOR_SECONDARY_TEXT.getColor());
        versionLabel.setText("Version: 0.5.0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 32;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        settingsPanel.add(versionLabel, gridBagConstraints);

        disclaimerLabel.setForeground(Palette.getCurrentScheme().COLOR_SECONDARY_TEXT.getColor());
        disclaimerLabel.setText("Please note that some settings may not function in this version");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 32;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        settingsPanel.add(disclaimerLabel, gridBagConstraints);

        settingsScrollPane.setViewportView(settingsPanel);

        activePanel.add(settingsScrollPane, "settingsCard");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mainPanel.add(activePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(mainPanel, gridBagConstraints);

        setSize(new java.awt.Dimension(720, 480));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void eventsToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventsToggleButtonActionPerformed
        // TODO add your handling code here:
		CardLayout card = (CardLayout)activePanel.getLayout();
		card.show(activePanel, "eventsCard");
    }//GEN-LAST:event_eventsToggleButtonActionPerformed

    private void teamsToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamsToggleButtonActionPerformed
        // TODO add your handling code here:
		CardLayout card = (CardLayout)activePanel.getLayout();
		card.show(activePanel, "teamsCard");
    }//GEN-LAST:event_teamsToggleButtonActionPerformed

    private void leaderboardToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaderboardToggleButtonActionPerformed
        // TODO add your handling code here:
		CardLayout card = (CardLayout)activePanel.getLayout();
		card.show(activePanel, "leaderboardCard");
    }//GEN-LAST:event_leaderboardToggleButtonActionPerformed

    private void settingsToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsToggleButtonActionPerformed
        // TODO add your handling code here:
		CardLayout card = (CardLayout)activePanel.getLayout();
		card.show(activePanel, "settingsCard");
    }//GEN-LAST:event_settingsToggleButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
		this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void closeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseEntered
        // TODO add your handling code here:
		closeButton.setBackground(Palette.getCurrentScheme().COLOR_CLOSE_MOUSE_OVER.getColor());
		closeButton.setIcon(Palette.getCurrentScheme().ICON_CLOSE_MOUSE_OVER.getIcon());
    }//GEN-LAST:event_closeButtonMouseEntered

    private void closeButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseExited
        // TODO add your handling code here:
		closeButton.setBackground(Palette.getCurrentScheme().COLOR_MAIN.getColor());
		closeButton.setIcon(Palette.getCurrentScheme().ICON_CLOSE.getIcon());
    }//GEN-LAST:event_closeButtonMouseExited

    private void maximiseButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maximiseButtonMouseEntered
        // TODO add your handling code here:
		maximiseButton.setBackground(Palette.getCurrentScheme().COLOR_MAIN_MOUSE_OVER.getColor());
		maximiseButton.setIcon(Palette.getCurrentScheme().ICON_MAXIMISE_MOUSE_OVER.getIcon());
    }//GEN-LAST:event_maximiseButtonMouseEntered

    private void maximiseButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maximiseButtonMouseExited
        // TODO add your handling code here:
		maximiseButton.setBackground(Palette.getCurrentScheme().COLOR_MAIN.getColor());
		maximiseButton.setIcon(Palette.getCurrentScheme().ICON_MAXIMISE.getIcon());
    }//GEN-LAST:event_maximiseButtonMouseExited

    private void minimiseButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimiseButtonMouseEntered
        // TODO add your handling code here:
		minimiseButton.setBackground(Palette.getCurrentScheme().COLOR_MAIN_MOUSE_OVER.getColor());
		minimiseButton.setIcon(Palette.getCurrentScheme().ICON_MINIMISE_MOUSE_OVER.getIcon());
    }//GEN-LAST:event_minimiseButtonMouseEntered

    private void minimiseButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimiseButtonMouseExited
        // TODO add your handling code here:
		minimiseButton.setBackground(Palette.getCurrentScheme().COLOR_MAIN.getColor());
		minimiseButton.setIcon(Palette.getCurrentScheme().ICON_MINIMISE.getIcon());
    }//GEN-LAST:event_minimiseButtonMouseExited

    private void eventsToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_eventsToggleButtonItemStateChanged
        // TODO add your handling code here:
		if (eventsToggleButton.isSelected()) {
			eventsToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_SELECTED_BACK.getColor());
			eventsToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_SELECTED_FRONT.getColor());
		} else {
			eventsToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
			eventsToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
		}
    }//GEN-LAST:event_eventsToggleButtonItemStateChanged

    private void teamsToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_teamsToggleButtonItemStateChanged
        // TODO add your handling code here:
		if (teamsToggleButton.isSelected()) {
			teamsToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_SELECTED_BACK.getColor());
			teamsToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_SELECTED_FRONT.getColor());
		} else {
			teamsToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
			teamsToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
		}
    }//GEN-LAST:event_teamsToggleButtonItemStateChanged

    private void leaderboardToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_leaderboardToggleButtonItemStateChanged
        // TODO add your handling code here:
		if (leaderboardToggleButton.isSelected()) {
			leaderboardToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_SELECTED_BACK.getColor());
			leaderboardToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_SELECTED_FRONT.getColor());
		} else {
			leaderboardToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
			leaderboardToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
		}
    }//GEN-LAST:event_leaderboardToggleButtonItemStateChanged

    private void settingsToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_settingsToggleButtonItemStateChanged
        // TODO add your handling code here:
		if (settingsToggleButton.isSelected()) {
			settingsToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_SELECTED_BACK.getColor());
			settingsToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_SELECTED_FRONT.getColor());
		} else {
			settingsToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
			settingsToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
		}
    }//GEN-LAST:event_settingsToggleButtonItemStateChanged

    private void eventsToggleButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventsToggleButtonMouseEntered
        // TODO add your handling code here:
		if (!eventsToggleButton.isSelected()) {
			eventsToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_BACK.getColor());
			eventsToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_FRONT.getColor());
		}
    }//GEN-LAST:event_eventsToggleButtonMouseEntered

    private void teamsToggleButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_teamsToggleButtonMouseEntered
        // TODO add your handling code here:
		if (!teamsToggleButton.isSelected()) {
			teamsToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_BACK.getColor());
			teamsToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_FRONT.getColor());
		}
    }//GEN-LAST:event_teamsToggleButtonMouseEntered

    private void leaderboardToggleButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leaderboardToggleButtonMouseEntered
        // TODO add your handling code here:
		if (!leaderboardToggleButton.isSelected()) {
			leaderboardToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_BACK.getColor());
			leaderboardToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_FRONT.getColor());
		}
    }//GEN-LAST:event_leaderboardToggleButtonMouseEntered

    private void settingsToggleButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingsToggleButtonMouseEntered
        // TODO add your handling code here:
		if (!settingsToggleButton.isSelected()) {
			settingsToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_BACK.getColor());
			settingsToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_FRONT.getColor());
		}
    }//GEN-LAST:event_settingsToggleButtonMouseEntered

    private void saveButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseEntered
        // TODO add your handling code here:
		saveButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_BACK.getColor());
		saveButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_FRONT.getColor());
    }//GEN-LAST:event_saveButtonMouseEntered

    private void loadButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadButtonMouseEntered
        // TODO add your handling code here:
		loadButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_BACK.getColor());
		loadButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_MOUSE_OVER_FRONT.getColor());
    }//GEN-LAST:event_loadButtonMouseEntered

    private void eventsToggleButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventsToggleButtonMouseExited
        // TODO add your handling code here:
		if (!eventsToggleButton.isSelected()) {
			eventsToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
			eventsToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
		}
    }//GEN-LAST:event_eventsToggleButtonMouseExited

    private void teamsToggleButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_teamsToggleButtonMouseExited
        // TODO add your handling code here:
		if (!teamsToggleButton.isSelected()) {
			teamsToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
			teamsToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
		}
    }//GEN-LAST:event_teamsToggleButtonMouseExited

    private void leaderboardToggleButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leaderboardToggleButtonMouseExited
        // TODO add your handling code here:
		if (!leaderboardToggleButton.isSelected()) {
			leaderboardToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
			leaderboardToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
		}
    }//GEN-LAST:event_leaderboardToggleButtonMouseExited

    private void settingsToggleButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingsToggleButtonMouseExited
        // TODO add your handling code here:
		if (!settingsToggleButton.isSelected()) {
			settingsToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
			settingsToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
		}
    }//GEN-LAST:event_settingsToggleButtonMouseExited

    private void saveButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseExited
        // TODO add your handling code here:
		saveButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
		saveButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
    }//GEN-LAST:event_saveButtonMouseExited

    private void loadButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadButtonMouseExited
        // TODO add your handling code here:
		loadButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
		loadButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
    }//GEN-LAST:event_loadButtonMouseExited

    private void dragBarPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragBarPanelMousePressed
        // TODO add your handling code here:
		posX = evt.getX();
		posY = evt.getY();
    }//GEN-LAST:event_dragBarPanelMousePressed

    private void dragBarPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragBarPanelMouseDragged
        // TODO add your handling code here:
		Rectangle rectangle = getBounds();
		this.setBounds(evt.getXOnScreen() - posX, evt.getYOnScreen() - posY, rectangle.width, rectangle.height);
    }//GEN-LAST:event_dragBarPanelMouseDragged

    private void alwaysOnTopLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_alwaysOnTopLabelMousePressed
        // TODO add your handling code here:
		alwaysOnTopCheck.setSelected(!alwaysOnTopCheck.isSelected());
    }//GEN-LAST:event_alwaysOnTopLabelMousePressed

    private void alwaysOnTopCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alwaysOnTopCheckActionPerformed
        // TODO add your handling code here:
		this.setAlwaysOnTop(alwaysOnTopCheck.isSelected());
    }//GEN-LAST:event_alwaysOnTopCheckActionPerformed

    private void darkThemeCheckItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_darkThemeCheckItemStateChanged
        // TODO add your handling code here:
		if (darkThemeCheck.isSelected()) {
			darkThemeCheck.setBackground(new java.awt.Color(114, 137, 218));
			Palette.setCurrentScheme(Palette.SchemeEnum.DARK);
			this.refreshComponents();
		} else {
			darkThemeCheck.setBackground(Palette.getCurrentScheme().COLOR_CHECK_BACK.getColor());
		}
    }//GEN-LAST:event_darkThemeCheckItemStateChanged

    private void lightThemeCheckItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lightThemeCheckItemStateChanged
        // TODO add your handling code here:
		if (lightThemeCheck.isSelected()) {
			lightThemeCheck.setBackground(new java.awt.Color(114, 137, 218));
			Palette.setCurrentScheme(Palette.SchemeEnum.LIGHT);
			this.refreshComponents();
		} else {
			lightThemeCheck.setBackground(Palette.getCurrentScheme().COLOR_CHECK_BACK.getColor());
		}
    }//GEN-LAST:event_lightThemeCheckItemStateChanged

    private void cozyDesignCheckItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cozyDesignCheckItemStateChanged
        // TODO add your handling code here:
		if (cozyDesignCheck.isSelected()) {
			cozyDesignCheck.setBackground(new java.awt.Color(114, 137, 218));
			cozyDesignCheck.setForeground(new java.awt.Color(255, 255, 255));
		} else {
			cozyDesignCheck.setBackground(Palette.getCurrentScheme().COLOR_CHECK_BACK.getColor());
			cozyDesignCheck.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
		}
    }//GEN-LAST:event_cozyDesignCheckItemStateChanged

    private void compactDesignCheckItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_compactDesignCheckItemStateChanged
        // TODO add your handling code here:
		if (compactDesignCheck.isSelected()) {
			compactDesignCheck.setBackground(new java.awt.Color(114, 137, 218));
			compactDesignCheck.setForeground(new java.awt.Color(255, 255, 255));
		} else {
			compactDesignCheck.setBackground(Palette.getCurrentScheme().COLOR_CHECK_BACK.getColor());
			compactDesignCheck.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
		}
    }//GEN-LAST:event_compactDesignCheckItemStateChanged

    private void maximiseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maximiseButtonActionPerformed
        // TODO add your handling code here:
		if (EsportsGUI.getFrames()[0].getExtendedState() == Frame.NORMAL) {
			EsportsGUI.getFrames()[0].setExtendedState(EsportsGUI.getFrames()[0].getExtendedState() | JFrame.MAXIMIZED_BOTH);
		} else if (EsportsGUI.getFrames()[0].getExtendedState() == Frame.MAXIMIZED_BOTH) {
			EsportsGUI.getFrames()[0].setState(Frame.NORMAL);
			EsportsGUI.getFrames()[0].setSize(720, 480);
			EsportsGUI.getFrames()[0].setLocationRelativeTo(null);
		}
		
    }//GEN-LAST:event_maximiseButtonActionPerformed

    private void minimiseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minimiseButtonActionPerformed
        // TODO add your handling code here:
		EsportsGUI.getFrames()[0].setState(Frame.ICONIFIED);
    }//GEN-LAST:event_minimiseButtonActionPerformed

    private void addEventButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addEventButtonMouseEntered
        // TODO add your handling code here:
		addEventButton.setIcon(Palette.getCurrentScheme().ICON_SMALL_PLUS_MOUSE_OVER.getIcon());
    }//GEN-LAST:event_addEventButtonMouseEntered

    private void addEventButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addEventButtonMouseExited
        // TODO add your handling code here:
		addEventButton.setIcon(Palette.getCurrentScheme().ICON_SMALL_PLUS.getIcon());
    }//GEN-LAST:event_addEventButtonMouseExited

    private void addEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEventButtonActionPerformed
        // TODO add your handling code here:
		String proposedName = JOptionPane.showInputDialog(this, "Please enter a name:");
		if (proposedName == null || proposedName.equals("")) return;
		boolean nameTaken = false;
		for (Event e : Event.list) {
			if (e.name.equals(proposedName)) {
				JOptionPane.showMessageDialog(this, "Name \"" + proposedName + "\" is already taken");
				nameTaken = true;
			}
		}
		if (!nameTaken) Event.add(proposedName);
    }//GEN-LAST:event_addEventButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (var info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EsportsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
		//</editor-fold>
		
        //</editor-fold>

		Palette.setCurrentScheme(Palette.SchemeEnum.DARK);
		
		System.setProperty("awt.useSystemAAFontSettings","on");
		
		ComponentResizer cr = new ComponentResizer();
		cr.setSnapSize(new Dimension(1, 1));
		cr.setMaximumSize(new Dimension(1920, 1080));
		cr.setMinimumSize(new Dimension(300, 100));
		
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
			cr.registerComponent(new EsportsGUI());
			EsportsGUI.getFrames()[0].setVisible(true);
			
			eventsScrollPane.getViewport().setOpaque(false);
			eventsScrollPane.getVerticalScrollBar().setUnitIncrement(16);
			teamsScrollPane.getViewport().setOpaque(false);
			teamsScrollPane.getVerticalScrollBar().setUnitIncrement(16);
			leaderboardScrollPane.getViewport().setOpaque(false);
			leaderboardScrollPane.getVerticalScrollBar().setUnitIncrement(16);
			settingsScrollPane.getViewport().setOpaque(false);
			settingsScrollPane.getVerticalScrollBar().setUnitIncrement(16);
			
			eventsToggleButton.setSelected(true);
		});
		
	
		
    }
	
	public static JPanel getEventsListPanel() {
		return eventsListPanel;
	}
	
	//public static JPanel getTeamsListPanel() {
		//return teamsListPanel;
	//}
	
	private void refreshComponents() {
		
		//Everything inside of Frame
		mainPanel.setBackground(Palette.getCurrentScheme().COLOR_MAIN.getColor());
		menuPanel.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
		activePanel.setBackground(Palette.getCurrentScheme().COLOR_ACTIVE.getColor());
		minimiseButton.setBackground(Palette.getCurrentScheme().COLOR_MAIN.getColor());
		minimiseButton.setIcon(Palette.getCurrentScheme().ICON_MINIMISE.getIcon());
		maximiseButton.setBackground(Palette.getCurrentScheme().COLOR_MAIN.getColor());
		maximiseButton.setIcon(Palette.getCurrentScheme().ICON_MAXIMISE.getIcon());
		closeButton.setBackground(Palette.getCurrentScheme().COLOR_MAIN.getColor());
		closeButton.setIcon(Palette.getCurrentScheme().ICON_CLOSE.getIcon());
		
		//Everything inside of menuPanel
		eventsToggleButton.setBackground(menuPanel.getBackground());
		eventsToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
		teamsToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
		teamsToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
		leaderboardToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
		leaderboardToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
		settingsToggleButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_SELECTED_BACK.getColor());
		settingsToggleButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_SELECTED_FRONT.getColor());
		saveButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
		saveButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
		loadButton.setBackground(Palette.getCurrentScheme().COLOR_MENU_BACK.getColor());
		loadButton.setForeground(Palette.getCurrentScheme().COLOR_MENU_FRONT.getColor());
		
		//Everything inside of eventsPanel
		addEventButton.setIcon(Palette.getCurrentScheme().ICON_SMALL_PLUS.getIcon());
		
		
		//Everything inside of settingsPanel
		appearanceLabel.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
		themeLabel.setForeground(Palette.getCurrentScheme().COLOR_TERTIARY_TEXT.getColor());
		if (!darkThemeCheck.isSelected()) {
			darkThemeCheck.setBackground(Palette.getCurrentScheme().COLOR_CHECK_BACK.getColor());
			darkThemeCheck.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
		}
		if (!lightThemeCheck.isSelected()) {
			lightThemeCheck.setBackground(Palette.getCurrentScheme().COLOR_CHECK_BACK.getColor());
			darkThemeCheck.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
		}
		displayLabel.setForeground(Palette.getCurrentScheme().COLOR_TERTIARY_TEXT.getColor());
		if (!cozyDesignCheck.isSelected()) {
			cozyDesignCheck.setBackground(Palette.getCurrentScheme().COLOR_CHECK_BACK.getColor());
			cozyDesignCheck.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
		}
		if (!compactDesignCheck.isSelected()) {
			compactDesignCheck.setBackground(Palette.getCurrentScheme().COLOR_CHECK_BACK.getColor());
			compactDesignCheck.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());	
		}
		accessibilityLabel.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
		alwaysOnTopLabel.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
		alwaysOnTopTipLabel.setForeground(Palette.getCurrentScheme().COLOR_SECONDARY_TEXT.getColor());
		alwaysOnTopCheck.setIcon(Palette.getCurrentScheme().ICON_TOGGLE_SWITCH.getIcon());
		alwaysOnTopCheck.setSelectedIcon(Palette.getCurrentScheme().ICON_SELECTED_TOGGLE_SWITCH.getIcon());
		alwaysOnTopSeparator.setBackground(Palette.getCurrentScheme().COLOR_SEPARATOR.getColor());
		alwaysOnTopSeparator.setForeground(Palette.getCurrentScheme().COLOR_SEPARATOR.getColor());
		naratorLabel.setForeground(Palette.getCurrentScheme().COLOR_PRIMARY_TEXT.getColor());
		naratorTipLabel.setForeground(Palette.getCurrentScheme().COLOR_SECONDARY_TEXT.getColor());
		naratorCheck.setIcon(Palette.getCurrentScheme().ICON_TOGGLE_SWITCH.getIcon());
		naratorCheck.setSelectedIcon(Palette.getCurrentScheme().ICON_SELECTED_TOGGLE_SWITCH.getIcon());
		naratorSeparator.setBackground(Palette.getCurrentScheme().COLOR_SEPARATOR.getColor());
		naratorSeparator.setForeground(Palette.getCurrentScheme().COLOR_SEPARATOR.getColor());
		versionLabel.setForeground(Palette.getCurrentScheme().COLOR_SECONDARY_TEXT.getColor());
		disclaimerLabel.setForeground(Palette.getCurrentScheme().COLOR_SECONDARY_TEXT.getColor());
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accessibilityLabel;
    private javax.swing.JPanel activePanel;
    private javax.swing.JButton addEventButton;
    private javax.swing.JPanel addEventPanel;
    private javax.swing.JCheckBox alwaysOnTopCheck;
    private javax.swing.JLabel alwaysOnTopLabel;
    private javax.swing.JSeparator alwaysOnTopSeparator;
    private javax.swing.JLabel alwaysOnTopTipLabel;
    private javax.swing.JLabel appearanceLabel;
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox compactDesignCheck;
    private javax.swing.JCheckBox cozyDesignCheck;
    private javax.swing.JCheckBox darkThemeCheck;
    private javax.swing.JLabel disclaimerLabel;
    private javax.swing.ButtonGroup displayButtonGroup;
    private javax.swing.JLabel displayLabel;
    private javax.swing.JPanel dragBarPanel;
    private static javax.swing.JPanel eventsListPanel;
    private javax.swing.JPanel eventsPanel;
    private static javax.swing.JScrollPane eventsScrollPane;
    private static javax.swing.JToggleButton eventsToggleButton;
    private javax.swing.JPanel leaderboardPanel;
    private static javax.swing.JScrollPane leaderboardScrollPane;
    private static javax.swing.JToggleButton leaderboardToggleButton;
    private javax.swing.JCheckBox lightThemeCheck;
    private javax.swing.JButton loadButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton maximiseButton;
    private javax.swing.ButtonGroup menuButtonGroup;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JButton minimiseButton;
    private javax.swing.JCheckBox naratorCheck;
    private javax.swing.JLabel naratorLabel;
    private javax.swing.JSeparator naratorSeparator;
    private javax.swing.JLabel naratorTipLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel settingsPanel;
    private static javax.swing.JScrollPane settingsScrollPane;
    private static javax.swing.JToggleButton settingsToggleButton;
    private javax.swing.JPanel teamsListPanel;
    private javax.swing.JPanel teamsPanel;
    private static javax.swing.JScrollPane teamsScrollPane;
    private static javax.swing.JToggleButton teamsToggleButton;
    private javax.swing.ButtonGroup themeButtonGroup;
    private javax.swing.JLabel themeLabel;
    private javax.swing.JLabel versionLabel;
    // End of variables declaration//GEN-END:variables
}
